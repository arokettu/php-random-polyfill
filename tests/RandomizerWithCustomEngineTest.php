<?php

declare(strict_types=1);

namespace Arokettu\Random\Tests;

use Arokettu\Random\Tests\DevEngines\Xorshift32;
use PHPUnit\Framework\TestCase;
use Random\Randomizer;

class RandomizerWithCustomEngineTest extends TestCase
{
    public function testGetInt(): void
    {
        $testMatrix = [
            -59034 => [
                32501, 63195, -16899, 52093, 24390, -16646, 22501, 30718, 65535, 63179, 32756, 63417, 61943, 32728,
                32630, 46586, 56785, 24555, -8, 47542, -40986, 56818, 28531, 10850, 64748, 64089, -30, 65239, 28586,
                65530, 48032, 32614, 22520, -2184, -14372, 65500, -269, 63917, -276, -26122, 53211, 64746, 29941, 57207,
                49052, -16464, 64639, -32874, -555, 24569, 65522, 64755, 65522, 8085, 64675, 60243, 3603, 60842, 65234,
                -28685, 22459, 65252, 65534, 45040, 6138, 16369, 65405, -8338, -1545, -2230, 15100, 57303, 32478, -8346,
                57333, 23490, -774, 60921, -32840, 65161, -29251, 64478, -83, -5189, 40434, 60821, 36854, 56766, -4505,
                -41996, 63485, 46321, -4100, 63404, 65488, 61424, -34154, 53024, 32217, 56309,
            ],
            17483 => [
                16375, 38910, 21855, 48937, 46923, 22454, -36947, 56255, -144, 64886, -17160, 65471, -8195, -3170,
                -16389, 63999, 42330, 63221, -15001, 64468, 48881, -57497, -10754, -2072, -8212, 60312, -51769, 65494,
                61353, 64731, 52982, 57335, -5121, 61168, 63409, 55231, 64373, 32746, 47098, 57264, -3603, 32150, -3365,
                60531, 65491, 26485, 49094, 55992, 30105, 31954, 27933, 16378, 56738, 65172, -8208, -2774, 60376, 65523,
                16316, -4111, -36944, 24573, -52667, 59370, 36818, -32906, 62970, 3877, 32119, 32598, -4, 32761, 55198,
                48124, 28497, 61401, -3091, 61673, 47861, 32722, 43979, 48964, 51709, 43762, 56958, 59390, -22540,
                64511, 57131, -8387, 65138, 23920, 21651, 56267, -101, 60204, -18985, 21488, 65407, 59128,
            ],
            -7694 => [
                29997, 65006, 22399, 32499, 22452, 32755, -257, -208, 65401, 23524, -6406, 59038, 57215, -20484, 28145,
                55153, 22344, 48979, 45013, 14067, -3, 33916, 65240, -8195, 64893, 61367, -17546, -43269, 32620, 12176,
                32764, 28659, 51416, 52336, -38913, 16379, 42878, 64178, 11252, 36817, 58224, 27768, 65488, 65473,
                43185, 65278, -36877, -6155, 64886, 28159, 26561, -26669, 65203, 45550, 60395, -16898, 57324, 55288,
                8182, 56806, -4, 26918, 55161, 48855, -40962, 60343, 7611, 65192, 64442, 20976, 44912, 64186, 32511,
                23034, 60404, 63157, 64094, 46078, -3118, 65524, 32767, -16934, 24297, 61299, 23322, 31188, -16448, -43,
                20471, 64690, 57054, 40828, 65523, -6344, 52960, 64958, 45182, 65204, 40864, -9263,
            ],
            -63067 => [
                64659, 32754, 62770, 34041, 32675, 40957, 48562, -8461, 65264, 64436, 55204, 56826, 40441, -1360, 24498,
                60063, 65173, 31221, -8208, 40390, 26327, 21996, -36910, -8744, -16540, -6175, 49663, 63034, 55658,
                -35146, -21135, -40979, -5282, 61225, -61468, 57328, 61176, 56647, 38789, 24566, 61426, 52711, -2407,
                -9, 47493, -16456, 28593, -8456, 65401, -22828, 15279, 65406, -6158, 52920, 62771, 65138, 65524, 11518,
                47977, 65273, -7177, 16178, 48830, 64417, -582, 64923, -49482, 50670, 64181, 65515, -8, 24191, 26560,
                63965, 32694, 32165, 27381, 65433, 62834, 57142, 65342, 65230, 24534, 12285, 20439, 64231, 48894, 13567,
                63479, -8711, 64186, 61634, 62425, -4232, -34819, 47090, -2697, 32648, 65386, 19964, 27381, 65433,
                62834, 57142, 65342, 65230, 24534, 12285, 20439, 64231, 48894, 13567, 63479, -8711, 64186, 61634, 62425,
                -4232, -34819, 47090, -2697, 32648, 65386, 19964,
            ],
            43492 => [
                59301, 59323, 56819, -2571, 5861, 60656, 65526, -18447, 45046, 48343, 27299, -2057, 30065, 57277, 30704,
                60415, -24706, 57207, 51172, 49135, 8188, 48974, 53867, 64246, 28249, 46555, 64444, 61267, 64978, 65478,
                48878, 54010, 32248, 31381, 28516, 63449, 61042, 65532, -1168, 48849, -4133, 42929, 40180, 60977, 40952,
                -20571, 58364, 63440, -32773, -12350, 65109, 61876, 32213, 58521, 57311, -1419, -14884, 57302, 64425,
                -57440, 65278, -1162, -2222, 30623, 55761, 60141, 57340, 60918, 65492, 15351, 63469, 49119, 24252,
                16374, 24352, 65433, 32691, -2957, 27349, -45083, 23419, -4718, 39924, 49020, 61396, 32739, 32764,
                63331, 65020, -51120, 30809, 47087, 38238, 55667, 40280, 32626, 53234, 63475, -13576, -1539,
            ],
        ];

        foreach ($testMatrix as $seed => $nums) {
            $rnd = new Randomizer(new Xorshift32($seed));

            for ($i = 0; $i < 100; $i++) {
                $num = $rnd->getInt(-65536, 65535);
                self::assertEquals($nums[$i], $num, "Seed: $seed Index: $i");
            }
        }
    }

    public function testNextInt(): void
    {
        $testMatrix = [
            -8234 => [
                39015338, 753332377, 743241107, 757924220, 760244301, 727761985, 251087637, 355132207, 548267656,
                333577846, 701113425, 88104129, 366288413, 885004230, 824395658, 596735763, 588461290, 876655501,
                605114405, 212402895,
            ],
            -47519 => [
                951019900, 631018556, 343603585, 571689140, 733903862, 1020631894, 945081785, 496911432, 939431603,
                3567831, 196902897, 202110912, 747383193, 509392278, 354573777, 227815725, 1031871061, 129831712,
                519776332, 94634773,
            ],
            34864 => [
                418073449, 21632762, 826122544, 644862989, 19080490, 357210841, 69506033, 487433052, 94423567, 12954511,
                54291429, 106644597, 879329535, 179976772, 866462493, 236359614, 600394142, 363397267, 47588238,
                308018029,
            ],
            14567 => [
                843307812, 768522583, 644661381, 838043867, 502660431, 702382145, 593508827, 791684406, 424210269,
                281734300, 645282864, 536196552, 14191790, 954582296, 144470603, 477439233, 578171931, 979343937,
                736126874, 91727475,
            ],
            -44941 => [
                367736309, 434509759, 959364295, 947726348, 854221026, 540269737, 796577322, 558836693, 42250303,
                82445758, 266679680, 66262122, 246865525, 980872681, 514858908, 892577437, 1038142413, 934693297,
                780974273, 184948091,
            ],
        ];

        foreach ($testMatrix as $seed => $nums) {
            $rnd = new Randomizer(new Xorshift32($seed));

            for ($i = 0; $i < 20; $i++) {
                $num = $rnd->getInt();
                self::assertEquals($nums[$i], $num, "Seed: $seed Index: $i");
            }
        }
    }

    public function testGetBytes(): void
    {
        $testMatrix = [
            33664 => [
                'b8', '2364', '748348', '8704e752', '3c4a887cbb', '18d09059f1cb', 'b818ee1ac4bcdf', '87b8a1393fa49a58',
                '1104b50fca42d149ce', '152a004034be176ddc58', '6a68755616af7a149ab491', 'fb05584488b60f58079d0a75',
                '12a4e773a013d96bb6d90b7c28', '351812445fcc83653b690c1dee24', 'a55c0d4bc951a073a5edb04ac7a288',
                'cf36da598ef0787f7a07494c09546878', 'dde2c02f1039f040d945913dcc866730f3',
                '2190763598f0220900bb0a31958e3b2bc17f', 'f930182eba9be72832388e29b6a1813fcde95b',
                '7c762b0cce267c3e1c881a6e90e53b5c544fb731',
            ],
            -43196 => [
                '2f', 'fbaa', '59a4bc', '8247c011', '5a68313fa7', 'c293161dd57a', '2048b3109beb59', '4ee37c3744eeb349',
                '59fb153ba6f5a50bee', '9ab64843b756e0662c95', 'ad282230f6f4c1537949bf', '91a89f5d37063e39ab83e346',
                'e0e44964cad96c426019e373e7', '8f0b294dc36943673e931a458048', '035c0c09e5950b53fe825317785e82',
                '1e63e2649e5cb7388c14b237bd6d5651', '6dbad90047351445b9672234b3017a6235',
                '17ef1e5749477d55e3691f4fb2064066d9ca', '58777c0df3a4797100261b794d35be26860de3',
                'cf492a6906816422a45ccf7a2955213a0bd00b00',
            ],
            63589 => [
                '83', '7811', 'd97547', 'c74d7146', '43defa169a', '732c4f397320', '42708d7c003926', 'e36bc5655fd89c5f',
                '94587456c732b871d7', '54ece172c13702223c92', 'c0ded91640c0380dd89129', '71bb4023a6adfe31e3af016d',
                '3d9041475e59875d08c33c6366', '91d67660a393396e256df6558ce0', 'a1b7730d22e6720bd9326721a719ba',
                '60c45712add0a531d5dbbe7d577e497e', '5664f561c9df8f62329da8379529d72507',
                '9f1dfa105b53733ab7711b53016b9c181f7e', '44144613c328196823a62c6d37a0f744af51da',
                'd8f81f799a809b461ea0936716539d61c96b0934',
            ],
            51298 => [
                '64', '2c30', '2e6a37', 'f7e1221c', 'd91e9843f8', '17d7e2537741', '83ad3a44866dd2', 'd7fd3141d270ef2f',
                '2815577ff161b123f6', '8abe51418a7c9826ce29', 'c407a82fec9d4245f3c41d', '721af0418d1e71157d1eb462',
                'c0560a4e89c1981e7db9955320', '8d077359ccd2d5094a2a05426c64', '697c102bc78a3437d147e36bfdad35',
                '38c0ce64dc15f22578697d0ef1621d49', '507a2d4d03278e2eb434a027cf21e20762',
                '97485b41d32a7e21e160ab60fa915f1a8a5c', 'fc44481277fb2e40378e4277d5d30b764dc85f',
                '26e99c113ac0bd1b07ade854c3d94568dd9fcf3c',
            ],
            -59300 => [
                'e6', '9b69', '343eba', '4ab8ef01', '19a43e2aa7', '1849bf1c1609', '4e9b2961ae3f4e', '13ffc16ac2055571',
                'b4cb406ccf54f8539f', 'afed8d53d36c3f29a1fe', '2bd04b350c669c266297e3', '4502f4727bf82f250b18361e',
                '9084dd7bd787bb221790681a62', '36033f7e5a4f6055ff02ef4dc770', '9cf9616315a1185608217e054735bf',
                'ccbaed0ed6e4300f638def66823e3f7f', '552c0105101ef831ade67a753a1d451cab',
                '4403301be8534970b2a0bb1c6448177d498f', '8c1dd937b8607a19ce0bc4781015034e406b81',
                '3457c52885125946a1903965d7fd9e32e543a149',
            ],
        ];

        foreach ($testMatrix as $seed => $strings) {
            $rnd = new Randomizer(new Xorshift32($seed));

            for ($i = 0; $i < 20; $i++) {
                $num = bin2hex($rnd->getBytes($i + 1));
                self::assertEquals($strings[$i], $num, "Seed: $seed Index: $i");
            }
        }
    }

    public function testShuffleArray(): void
    {
        $array = range(1, 100);

        $testMatrix = [
            -4850 => [
                62, 87, 5, 94, 58, 24, 86, 6, 99, 20, 28, 44, 95, 11, 17, 21, 91, 70, 68, 27, 8, 1, 98, 56, 73, 15, 63,
                54, 35, 32, 50, 76, 84, 31, 19, 34, 42, 22, 48, 16, 46, 51, 88, 37, 2, 72, 53, 60, 26, 38, 57, 43, 41,
                77, 49, 93, 82, 33, 12, 45, 66, 29, 47, 61, 36, 23, 10, 78, 13, 71, 18, 97, 79, 59, 90, 30, 40, 92, 3,
                100, 52, 65, 81, 64, 55, 4, 39, 9, 25, 69, 67, 75, 89, 96, 83, 74, 14, 80, 7, 85,
            ],
            -35518 => [
                38, 87, 16, 21, 100, 53, 70, 83, 42, 99, 19, 77, 2, 95, 65, 63, 58, 85, 6, 60, 94, 54, 3, 72, 30, 79,
                35, 59, 15, 75, 84, 26, 89, 96, 7, 55, 31, 11, 32, 14, 28, 91, 40, 10, 4, 20, 82, 74, 98, 69, 93, 1, 22,
                51, 67, 9, 80, 97, 48, 17, 45, 92, 71, 49, 33, 13, 47, 46, 29, 44, 68, 43, 73, 61, 88, 23, 5, 39, 8, 18,
                64, 66, 36, 25, 56, 78, 50, 24, 76, 86, 37, 81, 57, 52, 90, 27, 12, 34, 41, 62,
            ],
            41380 => [
                10, 83, 9, 36, 3, 29, 61, 41, 15, 90, 38, 20, 72, 25, 2, 4, 97, 86, 80, 63, 58, 48, 62, 99, 18, 96, 28,
                94, 31, 19, 52, 21, 76, 30, 8, 44, 46, 54, 68, 82, 49, 100, 81, 75, 26, 33, 35, 34, 16, 78, 51, 23, 14,
                1, 67, 95, 42, 40, 5, 24, 47, 37, 64, 55, 73, 77, 85, 84, 92, 89, 22, 87, 45, 7, 17, 79, 32, 50, 11, 6,
                60, 74, 65, 71, 13, 88, 91, 69, 93, 27, 12, 70, 66, 56, 53, 57, 59, 39, 43, 98,
            ],
            -6629 => [
                64, 57, 73, 15, 8, 35, 86, 44, 39, 81, 53, 85, 92, 4, 13, 28, 76, 96, 84, 5, 40, 24, 30, 87, 100, 90,
                26, 97, 48, 95, 19, 75, 79, 51, 93, 59, 21, 99, 63, 14, 98, 56, 61, 17, 46, 68, 43, 1, 50, 67, 12, 58,
                65, 47, 80, 89, 36, 66, 16, 3, 62, 42, 22, 74, 10, 70, 31, 71, 72, 7, 60, 32, 34, 83, 25, 38, 41, 33,
                11, 88, 52, 54, 78, 69, 37, 2, 23, 55, 20, 27, 6, 29, 82, 9, 91, 49, 45, 77, 18, 94,

            ],
            61842 => [
                53, 48, 59, 75, 49, 9, 18, 21, 4, 31, 84, 94, 50, 67, 24, 6, 81, 52, 3, 16, 78, 93, 22, 7, 40, 38, 100,
                42, 97, 98, 62, 37, 55, 51, 13, 91, 26, 77, 71, 2, 33, 11, 69, 63, 43, 12, 23, 46, 65, 86, 96, 36, 8, 1,
                92, 45, 44, 85, 15, 25, 95, 90, 61, 80, 70, 10, 79, 76, 99, 66, 54, 88, 30, 82, 56, 35, 47, 60, 34, 57,
                87, 28, 19, 74, 27, 58, 32, 14, 83, 73, 64, 17, 20, 72, 41, 29, 5, 39, 89, 68,
            ],
        ];

        foreach ($testMatrix as $seed => $shuffledExpected) {
            $rnd = new Randomizer(new Xorshift32($seed));

            $shuffled = $rnd->shuffleArray($array);
            self::assertEquals($shuffledExpected, $shuffled, "Seed: $seed");
        }
    }

    public function testShuffleString(): void
    {
        $string = implode(range('a', 'z')) . implode(range('0', 9)) . implode(range('A', 'Z'));

        $testMatrix = [
            -35487 => 'C1GXqfjlTJIRDEPmb3HzxOBWgY9eUAorLVs0Q6vMi5S7taFynh2k48uNKZcdpw',
            39925  => '4wXvNxatdpHoyLMUTj78JKS2AOI0EmnFCP19YBVli5hZDfkGbeg3RWqrzQsuc6',
            -27577 => '7w89yAMp1aSqj6gRNz5lGxhmF2en4K3HtYsEIdUQCfXoDVvPLJuZWckB0bOTir',
            -38362 => 'fmql937r2QNY15uSeBkzaMT8OpEcRDCvLZhGgUiJXbWnAdI04V6yKPjtHFsowx',
            -54215 => 'F9CNSux6YoiKUGjtnzelMHOREf2Ls5DvgqXrJ4ayhcI1mQPp7kwAVZB38WdT0b',
        ];

        foreach ($testMatrix as $seed => $shuffledExpected) {
            $rnd = new Randomizer(new Xorshift32($seed));

            $shuffled = $rnd->shuffleBytes($string);
            self::assertEquals($shuffledExpected, $shuffled, "Seed: $seed");
        }
    }

    public function testPickKeys(): void
    {
        $array = array_flip(array_merge(range('a', 'z'), range('0', 9), range('A', 'Z')));

        $testMatrix = [
            63250 => [
                ['d'],
                ['y', 'F'],
                ['c', 'D', 'I'],
                ['a', 'k', 'u', 1],
                ['f', 'x', 'A', 'C', 'I'],
                ['a', 'e', 'i', 'l', 8, 'H'],
                ['j', 'l', 'w', 5, 'E', 'F', 'R'],
                ['c', 'f', 'm', 'w', 2, 4, 6, 'B'],
                ['k', 'q', 'y', 0, 1, 8, 'N', 'O', 'Z'],
                ['e', 'g', 'r', 't', 0, 1, 'E', 'M', 'O', 'P'],
                ['d', 'e', 'f', 'g', 'p', 't', 'B', 'D', 'J', 'X', 'Z'],
                ['i', 'k', 'l', 't', 'w', 'z', 0, 4, 'F', 'H', 'J', 'Y'],
                ['d', 'f', 'l', 'p', 's', 'y', 'z', 1, 'B', 'P', 'V', 'W', 'X'],
                ['b', 'd', 'h', 's', 'u', 'w', 2, 3, 4, 'I', 'K', 'P', 'R', 'S'],
                ['a', 'd', 'j', 'p', 'u', 'w', 4, 5, 'E', 'F', 'G', 'L', 'P', 'V', 'W'],
                ['d', 'o', 'p', 'r', 'u', 1, 3, 5, 6, 8, 'C', 'K', 'M', 'P', 'R', 'V'],
                ['b', 'c', 'm', 'o', 'q', 'v', 1, 4, 5, 8, 9, 'C', 'D', 'E', 'M', 'V', 'X'],
                ['c', 'e', 'g', 'o', 'p', 'q', 's', 't', 'y', 2, 6, 7, 'G', 'I', 'M', 'N', 'W', 'Z'],
                ['a', 'j', 'k', 'm', 'o', 'w', 'x', 0, 3, 4, 'A', 'D', 'G', 'H', 'J', 'K', 'M', 'T', 'Y'],
                ['c', 'd', 'h', 'q', 's', 'u', 'x', 'y', 0, 3, 9, 'F', 'G', 'K', 'M', 'O', 'Q', 'R', 'S', 'Z'],
            ],
            19413 => [
                ['P'],
                ['x', 'K'],
                [1, 'M', 'U'],
                ['b', 'n', 'y', 'H'],
                ['k', 's', 'w', 'M', 'S'],
                ['b', 'A', 'D', 'M', 'U', 'X'],
                ['a', 'b', 'o', 's', 3, 6, 'B'],
                ['g', 'i', 'q', 'u', 'C', 'P', 'S', 'Y'],
                ['c', 'f', 'i', 'u', 'w', 8, 'K', 'M', 'R'],
                ['c', 'i', 'v', 'w', 'y', 3, 4, 7, 9, 'K'],
                ['b', 'e', 'j', 'p', 't', 8, 'H', 'J', 'M', 'Q', 'W'],
                ['d', 'g', 'h', 'i', 'n', 'v', 'w', 'y', 'z', 'L', 'M', 'O'],
                ['e', 'f', 'h', 'l', 'o', 'r', 'z', 0, 2, 8, 'E', 'X', 'Z'],
                ['a', 'i', 'l', 'n', 'v', 'y', 1, 7, 'E', 'F', 'G', 'K', 'Q', 'R'],
                ['a', 'c', 'e', 'h', 'u', 'x', 4, 7, 'D', 'E', 'F', 'R', 'S', 'W', 'X'],
                ['a', 'j', 'm', 'o', 'p', 'r', 2, 6, 9, 'E', 'G', 'K', 'L', 'M', 'Q', 'S'],
                ['e', 'g', 'i', 'j', 's', 'w', 'y', 'z', 1, 3, 5, 'B', 'G', 'O', 'P', 'T', 'U'],
                ['a', 'd', 'e', 'h', 'j', 'm', 'u', 'z', 7, 'A', 'B', 'C', 'D', 'E', 'I', 'N', 'Q', 'T'],
                ['a', 'd', 'j', 'm', 'n', 'q', 'x', 6, 7, 8, 'A', 'B', 'D', 'E', 'G', 'N', 'P', 'W', 'X'],
                ['c', 'e', 'k', 'm', 'p', 's', 'u', 0, 5, 6, 9, 'A', 'B', 'D', 'G', 'H', 'I', 'L', 'R', 'T'],
            ],
            -3227 => [
                ['M'],
                ['u', 2],
                ['k', 6, 'I'],
                ['a', 'j', 'y', 'F'],
                ['m', 'x', 7, 9, 'H'],
                ['e', 'y', 4, 7, 'A', 'T'],
                ['n', 'o', 0, 5, 'N', 'O', 'R'],
                ['a', 'j', 'o', 'u', 3, 'F', 'K', 'T'],
                ['k', 'q', 1, 9, 'D', 'E', 'N', 'T', 'X'],
                ['e', 'p', 'u', 'v', 1, 'F', 'G', 'H', 'P', 'Z'],
                ['m', 't', 'v', 'y', 0, 5, 'A', 'B', 'C', 'E', 'Q'],
                ['b', 'f', 'h', 'o', 'q', 'w', 'y', 7, 'B', 'C', 'G', 'H'],
                ['n', 'o', 't', 'x', 4, 5, 7, 9, 'F', 'H', 'J', 'K', 'M'],
                ['i', 'o', 'p', 's', 't', 'x', 0, 2, 7, 'I', 'N', 'R', 'U', 'Y'],
                ['d', 'h', 'j', 'r', 't', 'u', 'z', 5, 7, 9, 'B', 'D', 'F', 'T', 'U'],
                ['a', 'b', 'c', 'i', 'k', 's', 'v', 'z', 3, 4, 7, 8, 'C', 'O', 'U', 'W'],
                ['a', 'd', 'f', 'g', 'o', 't', 'x', 'y', 2, 'B', 'K', 'N', 'Q', 'R', 'U', 'V', 'Z'],
                ['q', 't', 'x', 2, 4, 5, 6, 8, 'B', 'C', 'D', 'E', 'F', 'K', 'M', 'P', 'R', 'Z'],
                ['c', 'e', 'k', 'l', 'm', 'n', 'o', 'v', 'w', 4, 9, 'A', 'C', 'E', 'K', 'T', 'U', 'X', 'Z'],
                ['a', 'j', 'o', 'r', 's', 'u', 'y', 'z', 5, 8, 9, 'A', 'B', 'E', 'F', 'J', 'Q', 'R', 'S', 'V'],
            ],
            6752 => [
                ['p'],
                ['q', 'V'],
                ['y', 'O', 'Q'],
                ['u', 7, 'K', 'V'],
                ['i', 'j', 'm', 'o', 'y'],
                ['h', 6, 'B', 'E', 'S', 'U'],
                ['m', 'r', 'u', 'x', 6, 'X', 'Y'],
                ['e', 'j', 'u', 'x', 4, 'F', 'Q', 'Y'],
                ['h', 'm', 'o', 'x', 'y', 5, 'A', 'J', 'O'],
                ['c', 'i', 'j', 'n', 's', 'u', 'B', 'C', 'L', 'P'],
                ['a', 'j', 'n', 'p', 't', 'x', 3, 'G', 'P', 'U', 'W'],
                ['h', 'i', 'j', 'm', 'r', 4, 5, 7, 'B', 'C', 'D', 'V'],
                ['g', 'j', 'k', 'm', 'n', 'p', 't', 4, 'H', 'L', 'O', 'Q', 'S'],
                ['d', 'e', 'h', 'o', 'q', 'u', 0, 3, 9, 'D', 'M', 'N', 'V', 'Z'],
                ['h', 'l', 'n', 'o', 't', 'v', 'w', 0, 2, 'I', 'N', 'Q', 'R', 'Y', 'Z'],
                ['c', 'g', 'k', 'p', 'q', 'u', 'w', 'y', 2, 6, 8, 'G', 'L', 'S', 'V', 'Y'],
                ['b', 'e', 't', 'x', 1, 'G', 'I', 'K', 'L', 'O', 'P', 'Q', 'R', 'S', 'U', 'V', 'W'],
                ['h', 'k', 'l', 'r', 't', 'u', 2, 9, 'A', 'C', 'D', 'G', 'P', 'Q', 'R', 'S', 'V', 'X'],
                ['f', 'h', 'j', 'm', 'o', 'p', 'q', 'r', 's', 'y', 'z', 5, 'E', 'L', 'R', 'S', 'T', 'U', 'V'],
                ['b', 'd', 'e', 'g', 'h', 'p', 'w', 'x', 6, 8, 'A', 'B', 'C', 'D', 'E', 'H', 'K', 'P', 'T', 'X'],

            ],
            -41584 => [
                ['o'],
                ['d', 'C'],
                ['C', 'P', 'T'],
                ['l', 'n', 8, 'K'],
                ['c', 'o', 'v', 'B', 'Y'],
                ['j', 'p', 'v', 9, 'S', 'Z'],
                ['i', 'w', 'E', 'H', 'O', 'U', 'W'],
                ['c', 'f', 'h', 8, 9, 'N', 'Y', 'Z'],
                ['d', 'f', 'i', 'k', 0, 9, 'G', 'M', 'X'],
                ['b', 'm', 'p', 'q', 's', 4, 'A', 'G', 'I', 'S'],
                ['a', 'j', 'k', 'l', 'm', 'p', 's', 'v', 'A', 'N', 'R'],
                ['a', 'e', 'h', 'y', 0, 1, 2, 'A', 'F', 'I', 'O', 'Y'],
                ['d', 'g', 'm', 'q', 't', 'u', 3, 5, 6, 'I', 'J', 'K', 'M'],
                ['a', 'h', 'j', 'n', 'p', 'w', 4, 7, 'A', 'B', 'E', 'J', 'Q', 'T'],
                ['a', 'b', 'i', 't', 'x', 2, 6, 'A', 'B', 'C', 'D', 'E', 'G', 'I', 'J'],
                ['f', 'p', 't', 'v', 'x', 0, 7, 'C', 'D', 'E', 'J', 'L', 'M', 'O', 'Q', 'U'],
                ['j', 'n', 'p', 'r', 'w', 'y', 0, 1, 5, 'D', 'E', 'G', 'J', 'K', 'L', 'X', 'Z'],
                ['i', 'l', 'q', 'r', 's', 'u', 'w', 'x', 2, 'A', 'E', 'I', 'K', 'L', 'N', 'O', 'S', 'Z'],
                ['a', 'c', 'k', 'n', 'o', 's', 't', 'v', 7, 'A', 'C', 'E', 'G', 'H', 'K', 'N', 'R', 'V', 'Z'],
                ['d', 'h', 'i', 'l', 't', 'v', 'w', 'z', 2, 3, 7, 9, 'A', 'C', 'J', 'K', 'N', 'S', 'T', 'V'],
            ],
        ];

        foreach ($testMatrix as $seed => $keysExpected) {
            $rnd = new Randomizer(new Xorshift32($seed));

            for ($i = 0; $i < 20; $i++) {
                $keys = $rnd->pickArrayKeys($array, $i + 1);
                self::assertEquals($keysExpected[$i], $keys, "Seed: $seed Index: $i");
            }
        }
    }
}
